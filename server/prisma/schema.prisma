generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  timestamp    DateTime    @default(now())
  email        String      @unique
  password     String
  salt         String
  authToken    String      @unique
  tokenExpires BigInt
  name         String?
  timetables   Timetable[]
  tasks        Task[]
  notes        Note[]
  subjects     Subject[]
}

model Timetable {
  id        String    @id @default(uuid())
  timestamp DateTime  @default(now())
  subjects  Subject[]
  user      User      @relation(fields: [userID], references: [id])
  userID    String
  weeks     Week[]
}

model Week {
  id          String            @id @default(uuid())
  number      Int
  instances   SubjectInstance[]
  timetable   Timetable         @relation(fields: [timetableID], references: [id])
  timetableID String
}

model Subject {
  id          String            @id @default(uuid())
  timestamp   DateTime          @default(now())
  name        String
  color       String
  timetable   Timetable         @relation(fields: [timetableID], references: [id])
  timetableID String
  instances   SubjectInstance[]
  tasks       Task[]
  user        User              @relation(fields: [userID], references: [id])
  userID      String
}

model SubjectInstance {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  subject   Subject  @relation(fields: [subjectID], references: [id])
  subjectID String
  day       String
  time      String
  room      String?
  teacher   String?
  userID    String
  week      Week?    @relation(fields: [weekID], references: [id])
  weekID    String?
}

model Task {
  id          String   @id @default(uuid())
  timestamp   DateTime @default(now())
  subject     Subject? @relation(fields: [subjectID], references: [id])
  subjectID   String?
  due         DateTime
  name        String
  description String?
  completed   Boolean  @default(false)
  user        User     @relation(fields: [userID], references: [id])
  userID      String
}

model Note {
  id         String    @id @default(uuid())
  timestamp  DateTime  @default(now())
  name       String
  text       String?
  isPinboard Boolean   @default(false)
  pinboard   Pinboard? @relation(fields: [pinboardID], references: [id])
  pinboardID String?   @unique
  user       User      @relation(fields: [userID], references: [id])
  userID     String
}

model Pinboard {
  id   String @id @default(uuid())
  note Note?
  pins Pin[]
}

model Pin {
  id         String    @id @default(uuid())
  name       String?
  text       String?
  images     Url[]
  pinboard   Pinboard? @relation(fields: [pinboardID], references: [id])
  pinboardID String?
}

model Url {
  id    String  @id @default(uuid())
  url   String
  pin   Pin?    @relation(fields: [pinID], references: [id])
  pinID String?
}
